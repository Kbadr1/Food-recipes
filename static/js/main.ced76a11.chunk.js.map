{"version":3,"sources":["components/SearchForm.js","components/RecipeDetails.js","components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","search","updateSearch","getSearchResult","className","onSubmit","type","placeholder","value","onChange","RecipeDetails","ingredients","map","ingredient","key","Math","random","text","Recipe","recipe","useState","show","setShow","url","image","label","src","alt","onClick","App","recipeName","setRecipeName","setSearch","recipes","setRecipes","useEffect","axios","get","then","res","data","hits","catch","err","console","log","e","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yQAaeA,EAXI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBACxC,OACI,yBAAKC,UAAU,eACX,0BAAMC,SAAUF,GACZ,2BAAOG,KAAK,OAAOC,YAAY,cAAcC,MAAOP,EAAQQ,SAAUP,IACtE,4BAAQI,KAAK,UAAb,aCODI,EAZO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OACI,wBAAIP,UAAU,iBACTO,EAAYC,KAAI,SAAAC,GACb,OACQ,wBAAIC,IAAKC,KAAKC,UAAWH,EAAWI,WCe7CC,EAnBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACHC,oBAAS,GADN,mBACpBC,EADoB,KACdC,EADc,OAEgBH,EAAOA,OAA1CI,EAFmB,EAEnBA,IAAKC,EAFc,EAEdA,MAAOC,EAFO,EAEPA,MAAOd,EAFA,EAEAA,YAEvB,OACI,yBAAKP,UAAU,kCAAkCU,IAAKS,GAClD,yBAAKnB,UAAU,yBACX,yBAAKsB,IAAKF,EAAOpB,UAAU,eAAeuB,IAAI,QAC9C,yBAAKvB,UAAU,eACX,wBAAIA,UAAU,gBAAgBqB,GAC9B,uBAAGrB,UAAU,MAAMwB,QAAS,kBAAMN,GAASD,KAA3C,eACCA,GAAQ,kBAAC,EAAD,CAAeV,YAAaA,Q,MCmC9CkB,MA3Cf,WAAgB,IAAD,EACyBT,mBAAS,WADlC,mBACJU,EADI,KACQC,EADR,OAEiBX,mBAAS,IAF1B,mBAEJnB,EAFI,KAEI+B,EAFJ,OAGmBZ,mBAAS,IAH5B,mBAGJa,EAHI,KAGKC,EAHL,KA+BX,OALAC,qBAAU,WACa,KAAfL,GApBJM,IAAMC,IAAN,0CAA6CP,EAA7C,gHACKQ,MAAK,SAAAC,GACFL,EAAWK,EAAIC,KAAKC,SAEvBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAiBnB,CAACb,IAGA,yBAAK1B,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAYD,gBAdA,SAAA2C,GACpBA,EAAEC,iBACFhB,EAAc9B,GACd+B,EAAU,KAW4C/B,OAAQA,EAAQC,aAlBrD,SAAA4C,GACjBd,EAAUc,EAAEE,OAAOxC,UAkBX,yBAAKJ,UAAU,eACV6B,EAAQrB,KAAI,SAAAO,GAAM,OAAI,kBAAC,EAAD,CAAQA,OAAQA,EAAQL,IAAKC,KAAKC,kBC9BzDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.ced76a11.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchForm = ({ search, updateSearch, getSearchResult }) => {\n    return (\n        <div className=\"search-form\">\n            <form onSubmit={getSearchResult}>\n                <input type=\"text\" placeholder=\"Recipe name\" value={search} onChange={updateSearch}/>\n                <button type=\"submit\">Search</button>\n            </form>\n        </div>\n    );\n}\n \nexport default SearchForm;","import React from 'react';\n\nconst RecipeDetails = ({ ingredients }) => {\n    return (\n        <ul className=\"RecipeDetails\">\n            {ingredients.map(ingredient => {\n                return(\n                        <li key={Math.random()}>{ingredient.text}</li>\n                )\n            })}\n        </ul>\n    )\n}\n \nexport default RecipeDetails;","import React, { useState } from 'react';\nimport RecipeDetails from './RecipeDetails';\n\nconst Recipe = ({ recipe }) => {\n    const [show, setShow] = useState(false);\n    const { url, image, label, ingredients } = recipe.recipe;\n\n        return(\n            <div className=\"recipe col-12 col-sm-6 col-lg-4\" key={url} >\n                <div className=\"recipe-details col-12\">\n                    <img src={image} className=\"card-img-top\" alt=\"...\"/>\n                    <div className=\"recipe-body\">\n                        <h5 className=\"recipe-title\">{label}</h5>\n                        <a className=\"btn\" onClick={() => setShow(!show)}>Ingredients</a>\n                        {show && <RecipeDetails ingredients={ingredients}/>}\n                    </div>\n                </div>\n                \n            </div>\n        )\n}\n \nexport default Recipe;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport SearchForm from \"./components/SearchForm\";\nimport Recipe from \"./components/Recipe\";\nimport './App.css';\n\nfunction App() {\n    const [recipeName, setRecipeName] = useState(\"noodles\");\n    const [search, setSearch] = useState(\"\");\n    const [recipes, setRecipes] = useState([]);\n\n\n    const getRecipe = () => {\n        axios.get(`https://api.edamam.com/search?q=${recipeName}&app_id=f466e26e&app_key=aeb50f5952d2078033b4cf6a13f91d11&from=0&to=30&calories=591-722&health=alcohol-free`)\n            .then(res => {\n                setRecipes(res.data.hits)\n            })\n            .catch(err => {\n              console.log(err);\n            })\n    }\n\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    }\n\n    const getSearchResult = e => {\n        e.preventDefault();\n        setRecipeName(search);\n        setSearch(\"\");\n    }\n\n    useEffect(() => {\n        if (recipeName === \"\") return;\n        getRecipe();\n    }, [recipeName]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <SearchForm getSearchResult={getSearchResult} search={search} updateSearch={updateSearch} />\n                <div className=\"recipes row\">\n                    {recipes.map(recipe => <Recipe recipe={recipe} key={Math.random()} />)}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}